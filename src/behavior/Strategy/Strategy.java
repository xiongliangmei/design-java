package behavior.Strategy;
/**
 * 它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户。
 * 如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为
 * 一个系统需要动态地在几种算法中选择一种。
 *如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。
 * 策略模式的Strategy类层次为Context定义了一系列的可供重用的算法或行为。继承有助于析取出这些算法中的公共功能。
 * 简化了单元测试，因此每个算法都有自己的类，可以通过自己的接口单独测试。
 * **/
public abstract class Strategy {
    //算法方法
    public abstract void  AlgorithmInterface();
}
