package build.prototype;

/***
 * 　　原型模式要求对象实现一个可以“克隆”自身的接口，这样就可以通过复制一个实例对象本身来创建一个新的实例。这样一来，通过原型实例创建新的对象，就不再需要关心这个实例本身的类型，
 *     只要实现了克隆自身的方法，就可以通过这个方法来获取新的对象，而无须再去通过new来创建。
 * 　　原型模式有两种表现形式：（1）简单形式、（2）登记形式，这两种表现形式仅仅是原型模式的不同实现。
 * 　　（1）客户(Client)角色：客户类提出创建对象的请求。
 *
 * 　　（2）抽象原型(Prototype)角色：这是一个抽象角色，通常由一个Java接口或Java抽象类实现。此角色给出所有的具体原型类所需的接口。
 *
 * 　　（3）具体原型（Concrete Prototype）角色：被复制的对象。此角色需要实现抽象的原型角色所要求的接口。
 */
public interface Prototype {
    /***
     * 克隆自身的方法  抽象原型角色
     * @return
     */
    Object clone();
    String getName();
    void setName(String name);
}
